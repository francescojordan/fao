{% extends 'formTemplate.html.twig' %}


{% block javascripts %}
  
 {{ parent() }}
 <!-- LEAFLET -->

  

 
{% endblock %}


{% block body %}



<!-- MAPPA -->
 

<p> {{ script2 | raw }} </p>
<p> {{ script3.2 }} </p>
 <h1>MAPPA</h1>

 </p>   
<p> <script>document.write(bicycleRental);</script></p>
<div class="row">
<div id="mapid" style="width: 800px; height: 600px; border: 1px solid #ccc"></div>

  
<script>
    // DICHIARAZIONE SENZA GEOJSON
	//var mymap = L.map('mapid').setView([43.49, 13.6], 13);
    //DICHIARAZIONE CON GEOJSON
    var mymap = L.map('mapid').setView([13.43, 14.44], 13);


	L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
		maxZoom: 18,
		attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
			'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
			'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
		id: 'mapbox.streets'
	}).addTo(mymap);


//AGGIUNGO POLIGONO

//PRIMO VALORE LONGITUDINE
//SECONDO LATITUDINE

//AGGIUNGO UN POPUP AL POLIGONO

//GESTISCO EVENTI
//CREO UN POP UO CHE MI MOSTRA LE COORDINATE DOVE STO CLICCANDO

var popup = L.popup();

function onMapClick(e) {
    popup
        .setLatLng(e.latlng)
        .setContent("HAI CLICCATO SULLE SEGUENTI COORDINATE " + e.latlng.toString())
        .openOn(mymap);
}

mymap.on('click', onMapClick);


//PROVO GEOJSON
var myStyle = {
    "color": "#ff7800",
    "weight": 5,
    "opacity": 0.65
};

{% for polygon in script3 %}
L.geoJSON({{ polygon | raw}}, {
    style: myStyle
}).addTo(mymap);

{% endfor %}

var myStyle = {
    "color": "#ff7800",
    "weight": 5,
    "opacity": 0.65
};

L.geoJSON({{ script3.2 | raw}}, {
    style: myStyle
}).addTo(mymap);

//DEFINISCO LA FUNZIONE
function onEachFeature(feature, layer) {
		var popupContent = "<p>I started out as a GeoJSON " +
				feature.geometry.type + ", but now I'm a Leaflet vector!</p>";

		if (feature.properties && feature.properties.popupContent) {
			popupContent += feature.properties.popupContent;
		}

		layer.bindPopup(popupContent);
	}
	
	L.geoJSON([bicycleRental], {

		style: function (feature) {
			return feature.properties && feature.properties.style;
		},

		onEachFeature: onEachFeature,

		pointToLayer: function (feature, latlng) {
			return L.circleMarker(latlng, {
				radius: 8,
				fillColor: "#ff7800",
				color: "#000",
				weight: 1,
				opacity: 1,
				fillOpacity: 0.8
			});
		}
	}).addTo(mymap);
L.geoJSON([testLine], {

		style: function (feature) {
			return feature.properties && feature.properties.style;
		},

		onEachFeature: onEachFeature,

		pointToLayer: function (feature, latlng) {
			return L.circleMarker(latlng, {
				radius: 8,
				fillColor: "#ff7800",
				color: "#000",
				weight: 1,
				opacity: 1,
				fillOpacity: 0.8
			});
		}
	}).addTo(mymap);

</script>

    <div id='delete'>Delete Features</div>
    <a href='#' id='export'>Export Features</a>


</div>

{% endblock %}

